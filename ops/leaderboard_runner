#!/usr/bin/env python3
import sys, os
import argparse
import datetime
import yaml # pip install pyyaml

if __name__ == '__main__':
    print(F'========== Host Runner Started ==========', file=sys.stderr, flush=True)
    print(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), file=sys.stderr, flush=True)

    parser = argparse.ArgumentParser()
    parser.add_argument('--runner_begin_stage', type=int, default=0, help='only run stages inside [begin, end)')
    parser.add_argument('--runner_end_stage', type=int, default=100, help='only run stages inside [begin, end)')
    parser.add_argument('--benchmark_stage', type=int, default=0, help='set stage variable in benchmark.sh')
    parser.add_argument('--max_num_utts', type=int, default=10000, help='max number of utts to test in a test set')
    parser.add_argument('request_file_path', type=str, help='request.yaml')
    args = parser.parse_args()

    utils_dir = os.path.abspath('utils')

    remote_model_zoo = 'oss://speechio-leaderboard/models'
    model_zoo = os.path.abspath('models')

    remote_dataset_zoo = 'oss://speechio-leaderboard/datasets'
    dataset_zoo = os.path.abspath('datasets')

    model = ''
    test_sets = []
    print(F'Processing benchmark request ...', file = sys.stderr)
    with open(args.request_file_path, 'r', encoding = 'utf-8') as request_file:
        request = yaml.safe_load(request_file)
        model = request['model']
        for x in request['test_set']:
            test_sets.append(x)
    assert(model)
    assert(test_sets)

    # download model
    print(F'Downloading {model} from model zoo ...', file = sys.stderr)
    remote_model_dir = os.path.join(remote_model_zoo, model) + '/'
    model_dir = os.path.join(model_zoo, model)
    if args.runner_begin_stage <= 1 < args.runner_end_stage:
        assert os.path.isfile('oss'), "Can't find oss, please run utils/install_oss.sh"
        if not os.path.isfile('SAFEBOX/oss.cfg'):
            instructions_to_get_credential = (
                'You need credential to use the leaderboard:\n  '
                'Please send email with title "oss.cfg" to leaderboard@speechio.ai, '
                'and paste auto-replied content to SAFEBOX/oss.cfg'
            )
            print(instructions_to_get_credential, file=sys.stderr)
            sys.exit(-1)

        cmd = F"./oss -c SAFEBOX/oss.cfg cp -ur {remote_model_dir} {model_dir}"
        print(cmd, file=sys.stderr)
        os.system(cmd)

    # check model
    model_info_path = os.path.join(model_dir, 'model.yaml')
    assert os.path.isfile(model_info_path)
    sbi_bin_path = os.path.join(model_dir, 'SBI')
    assert os.path.isfile(sbi_bin_path)
    docker_context = os.path.join(model_dir, 'docker')
    assert os.path.isdir(docker_context)
    docker_file = os.path.join(docker_context, 'Dockerfile')
    assert os.path.isfile(docker_file)

    with open(model_info_path, 'r', encoding = 'utf-8') as model_info_file:
        model_info = yaml.safe_load(model_info_file)
        task = model_info['task']
        language = model_info['language']
    assert task == 'ASR'
    assert language

    # build docker image
    docker_image = F'speechio/leaderboard:{model}'
    if args.runner_begin_stage <= 2 < args.runner_end_stage:
        print(F'Building docker image ...', file = sys.stderr)
        docker_build_cmd = (
            F'docker build -f {docker_file} -t {docker_image} '
            F'--build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g) '
            F'{docker_context}'
        )
        print(docker_build_cmd, file=sys.stderr)
        os.system(docker_build_cmd)

    # run benchmarking docker
    if args.runner_begin_stage <= 3 < args.runner_end_stage:
        print(F'Pulling up benchmarking container ...', file = sys.stderr)
        
        test_sets_argument = ' '.join(test_sets)
        leaderboard = os.getcwd()
        LEADERBOARD = '/app/speechio/leaderboard'
        docker_run_cmd = (
            F'docker run '
            F'-v {leaderboard}:{LEADERBOARD} '
            F'--user "$(id -u):$(id -g)" '
            F'-e LEADERBOARD={LEADERBOARD} '
            F'{docker_image} '
            F'{LEADERBOARD}/utils/benchmark.sh '
            F'--stage {args.benchmark_stage} --max-num-utts {args.max_num_utts} '
            F'{model} "{test_sets_argument}"'
        )
        print(docker_run_cmd, file=sys.stderr)
        os.system(docker_run_cmd)

    print(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), file=sys.stderr, flush=True)
    print(F'========== Host Runner Done ==========', file=sys.stderr, flush=True)
