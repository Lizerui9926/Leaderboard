#!/usr/bin/env python3
import sys, os
import argparse
import yaml # pip install pyyaml

if __name__ == '__main__':
    #LEADERBOARD = '/home/dophist/work/git/leaderboard'
    LEADERBOARD = '/app/speechio/leaderboard'

    DATASETS = os.path.abspath('datasets')
    UTILS = os.path.abspath('utils')

    parser = argparse.ArgumentParser()
    parser.add_argument('--begin_stage', type=int, default=0, help='only run stages inside [begin, end)')
    parser.add_argument('--end_stage', type=int, default=100, help='only run stages inside [begin, end)')
    parser.add_argument('--type', choices=['public', 'private'], default='public', type=str)
    parser.add_argument('submission_key', type=str)
    args = parser.parse_args()

    if args.begin_stage <= 1 and 1 < args.end_stage:
        print(F'Downloading submission dir from model hub ...', file = sys.stderr)
        remote_url = os.path.join('oss://speechio-leaderboard/hub', args.type, args.submission_key) + '/'
        work_dir = os.path.abspath(os.path.join('workspace', args.type, args.submission_key))
        cmd = F"./oss -c SAFEBOX/oss.cfg cp -ur {remote_url} {work_dir}"
        print(cmd, file=sys.stderr)
        os.system(cmd)

    if args.begin_stage <= 2 < args.end_stage:
        print(F'Building docker image ...', file = sys.stderr)
        docker_context = os.path.join(work_dir, 'docker')
        docker_file = os.path.join(work_dir, 'docker', 'Dockerfile')
        docker_image = F'speechio/leaderboard:{args.type}_{args.submission_key}'
        docker_build_cmd = F'docker build -f {docker_file} -t {docker_image} {docker_context}'
        print(docker_build_cmd, file=sys.stderr)
        os.system(docker_build_cmd)

    test_sets = []
    if args.begin_stage <= 3 < args.end_stage:
        print(F'preparing test env ...', file = sys.stderr)
        info_file_path = os.path.join(work_dir, 'info.yaml')
        with open(info_file_path, 'r') as info_file:
            info = yaml.safe_load(info_file)
            for x in info['test_sets']:
                test_sets.append(x)

    if args.begin_stage <= 4 < args.end_stage:
        print(F'Pulling up benchmarking container ...', file = sys.stderr)
        docker_run_cmd = (
            F'docker run '
            F'-e LEADERBOARD={LEADERBOARD} '
            F'-e TEST_SETS=\"{" ".join(test_sets)}\" '
            F'-v {DATASETS}:{LEADERBOARD}/datasets:ro '
            F'-v {UTILS}:{LEADERBOARD}/utils '
            F'-v {work_dir}:{LEADERBOARD}/test_env '
            F'{docker_image} {LEADERBOARD}/utils/benchmark.sh '
        )
        print(docker_run_cmd, file=sys.stderr)
        os.system(docker_run_cmd)
