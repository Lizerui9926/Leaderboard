#!/usr/bin/env python3
import sys, os
import argparse
import yaml # pip install pyyaml

if __name__ == '__main__':
    MODEL_ZOO = 'oss://speechio-leaderboard/model-zoo'

    LEADERBOARD = '/app/speechio/leaderboard'
    DATASETS = os.path.abspath('datasets')
    UTILS = os.path.abspath('utils')

    parser = argparse.ArgumentParser()
    parser.add_argument('--begin_stage', type=int, default=0, help='only run stages inside [begin, end)')
    parser.add_argument('--end_stage', type=int, default=100, help='only run stages inside [begin, end)')
    parser.add_argument('request_file_path', type=str, help='request.yaml')
    args = parser.parse_args()

    model = ''
    test_sets = []
    print(F'Processing benchmark request ...', file = sys.stderr)
    with open(args.request_file_path, 'r', encoding = 'utf-8') as request_file:
        request = yaml.safe_load(request_file)
        model = request['model']
        for x in request['test_sets']:
            test_sets.append(x)
    assert(model)
    assert(test_sets)

    # download model
    print(F'Downloading {model} from model zoo ...', file = sys.stderr)
    url = os.path.join(MODEL_ZOO, model) + '/'
    work_dir = os.path.abspath(os.path.join('workspace', model))
    cmd = F"./oss -c SAFEBOX/oss.cfg cp -ur {url} {work_dir}"
    print(cmd, file=sys.stderr)
    os.system(cmd)

    # check model
    model_info_path = os.path.join(work_dir, 'model.yaml')
    assert os.path.isfile(model_info_path)
    sbi_bin_path = os.path.join(work_dir, 'SBI')
    assert os.path.isfile(sbi_bin_path)
    docker_context = os.path.join(work_dir, 'docker')
    assert os.path.isdir(docker_context)
    docker_file = os.path.join(docker_context, 'Dockerfile')
    assert os.path.isfile(docker_file)

    with open(model_info_path, 'r', encoding = 'utf-8') as model_info_file:
        model_info = yaml.safe_load(model_info_file)
        task = model_info['task']
        language = model_info['language']
    assert task == 'ASR'
    assert language


    docker_image = F'speechio/leaderboard:{model}'
    if args.begin_stage <= 2 < args.end_stage:
        print(F'Building docker image ...', file = sys.stderr)
        docker_build_cmd = F'docker build -f {docker_file} -t {docker_image} {docker_context}'
        print(docker_build_cmd, file=sys.stderr)
        os.system(docker_build_cmd)


    if args.begin_stage <= 3 < args.end_stage:
        print(F'Pulling up benchmarking container ...', file = sys.stderr)
        docker_run_cmd = (
            F'docker run '
            F'-e LEADERBOARD={LEADERBOARD} '
            F'-e TEST_SETS=\"{" ".join(test_sets)}\" '
            F'-e TEST_LANG={language} '
            F'-v {DATASETS}:{LEADERBOARD}/datasets:ro '
            F'-v {UTILS}:{LEADERBOARD}/utils '
            F'-v {work_dir}:{LEADERBOARD}/test_env '
            F'{docker_image} {LEADERBOARD}/utils/benchmark.sh '
        )
        print(docker_run_cmd, file=sys.stderr)
        os.system(docker_run_cmd)
